syntax = "proto3";
import "google/protobuf/timestamp.proto";

option java_package = "com.google.pubsub.flic.common";
option java_outer_classname = "LoadtestProto";

service Loadtest {
  rpc Start(StartRequest) returns (StartResponse);
  rpc Check(CheckRequest) returns (CheckResponse);
}

message StartRequest {
  // The GCP project. This must be set even for Kafka, as we use it to export metrics to Stackdriver.
  string project = 1;

  // The Pub/Sub or Kafka topic name.
  string topic = 2;

  // The number of requests that can be made, each second, per client.
  int32 request_rate = 3;

  // The size of each user message to publish
  int32 message_size = 4;

  // The number of user messages of size message_size to batch together in each publish
  int32 batch_size = 5;

  // The maximum outstanding requests, per client.
  int32 max_outstanding_requests = 6;

  // The time at which the load test should start.
  google.protobuf.Timestamp start_time = 7;

  oneof stop_conditions {
    // The time at which the load test should be stopped.
    google.protobuf.Timestamp stop_time = 8;

    // The number of messages to publish or expect to receive.
    int32 number_of_messages = 9;
  }

  oneof options {
   PubsubOptions pubsub_options = 10;
   KafkaOptions kafka_options = 11;
  }
}

message StartResponse {
}

message PubsubOptions {
  // The Cloud Pub/Sub subscription name
  string subscription = 1;

  // The maximum number of messages to pull which each request.
  int32 max_messages_per_pull = 2;
}

message KafkaOptions {
  // The network address of the Kafka broker.
  string broker = 1;

  // The length of time to poll for.
  int32 poll_length = 2;
}

message CheckRequest {
}

message CheckResponse {
  repeated int64 bucket_values = 1;
  bool is_finished = 2;
}